/*------------- Routine d'initialization de touts les parametres et de l'Xtender ---------------*/
int Init(MQTTClient* client){
	Write(&Parameters_saved_in_flash_memory,client);
	Write(&Voltage_After_Over_allowed,client);
  Write(&Over_Voltage_Value_allowed,client);
	Write(&Under_Voltage_Value_allowed,client);
	Write(&Voltage_After_Under_allowed,client);
	Write(&Charger_allowed,client);
	Write(&Battery_Charge_current_DC,client);
	Write(&Use_dynamic_comp,client);
	Write(&Floating_voltage,client);
  Write(&Voltage_2_start_new_cycle,client);
	Write(&Voltage_1_start_new_cycle,client);
	Write(&Time_1_under_voltage,client);
	Write(&Time_2_under_voltage,client);
	Write(&Absorption_phase_allowed,client);
	Write(&Absorption_voltage,client);
  Write(&Floating_voltage,client);
	Write(&Absorption_duration,client);
	Write(&End_absorption_current,client);
	Write(&Current_to_quit_absorption,client);
	Write(&Maximal_freq_absorption,client);
	Write(&Delay_beetween_absorption,client);
	Write(&Equalization_phase_allowed,client);
	Write(&Reduced_floating_allowed,client);
	Write(&Periodic_absorption_allowed,client);
	Write(&Inverter_Allowed,client);
	Write(&Inverter_Output_Voltage,client);
	Write(&Inverter_Frequency,client);
	Write(&Batt_priority_source,client);
	Write(&Transfer_relay_allowed,client);
	Write(&Smart_boost_allowed,client);
	Write(&MAX_current_of_AC_IN,client);
	Write(&Multi_inverters_allowed,client);
	Write(&Integral_mode,client);
	Write(&Grid_Feeding_allowed,client);
	Write(&Battery_voltage_forced_feeding,client);
	Write(&Use_defined_phase_shift_curve,client);
	Write(&Maximal_freq_absorption,client);
	Write(&Delay_beetween_absorption,client);
	Write(&Equalization_phase_allowed,client);
	Write(&Reduced_floating_allowed,client);
	Write(&Periodic_absorption_allowed,client);
	Write(&Inverter_Allowed,client);
  Write(&Fast_charge_inject_regulation,client);
  Write(&Pulses_cutting_regulation_for_XT,client);
	return 1;
}


void Write_p(MQTTClient* client)/*scom_frame_t* frame,scom_property_t* property ,char* buffer,size_t buffer_length, struct connection* socket_struct, struct studer_data* data,char* ret_val)*/
{
	Write(&Batt_priority_source,client);
  Write(&Charger_allowed,client);
  Write(&Grid_Feeding_allowed,client);
  Write(&Inverter_Allowed,client);
  Write(&MAX_current_of_AC_IN,client);
  Write(&Max_Grid_Feeding_current,client);
  Write(&Battery_Charge_current_DC,client);
  Write(&Smart_boost_allowed,client);

 	if(INJ==1)
	{
 		Write(&Start_Time_forced_injection,client);
  }
  	Write(&Stop_Time_forced_injection,client);

  if(Force_floating.Value == 1)
	{
    	Write(&Force_floating,client);

    	Force_floating.Value = 0;
  }

 	if(Force_new_cycle.Value == 1)
	{
		Write(&Force_new_cycle,client);
		Force_new_cycle.Value = 0;
	}
  Write(&Floating_voltage,client);
}

void Read_p(MQTTClient *client,MQTTClient *client_bat)/*scom_frame_t* frame,scom_property_t* property ,char* buffer,size_t buffer_length, struct connection* socket_struct, struct studer_data* data,char* ret_val)MQTTClient *client)*/
{
 	Read(&i_Battery_Voltage_Studer,client);
 	Read(&i_Input_voltage_AC_IN,client);
 	Read(&i_State_of_charge,client);
 	Read(&i_Battery_Charge_current,client);
 	Read(&i_Output_voltage_AC_OUT,client);
 	Read(&i_Output_power_AC_OUT,client);
  Read(&i_Battery_cycle_phase,client);
  Read(&i_Input_current_AC_IN,client);
 	Read_bat(&i_Battery_Voltage,client_bat);
	Read_bat(&i_Battery_Current,client_bat);
	Read_bat(&i_soc_value_battery,client_bat);
	Read_bat(&i_State_of_Health,client_bat);
	Read_bat(&i_Battery_Voltage_Charge_limit,client_bat);
	Read_bat(&i_Battery_Voltage_Discharge_limit,client_bat);
	Read_bat(&i_Battery_Current_Charge_limit,client_bat);
	Read_bat(&i_Battery_Current_Discharge_limit,client_bat);
	Read_bat(&i_Battery_Current_Charge_recommanded,client_bat);
	Read_bat(&i_Battery_Current_Discharge_recommanded,client_bat);
}





//---------- DECLARATRION OF VAR -----------------------------------------------
 /*------------------------ Declaration parametres -------------------------------*/
	/*----------------- Battery Charge ----------------------------*/
	t_param Charger_allowed = 		{1125, 2, 13, 1,   1}; //PCO OK
	t_param Battery_Charge_current_DC = 	{1138, 2, 13, 6,  0};//step 1A; PCO OK on init à zero
	t_param Force_new_cycle = 		{1142, 2, 13, 5,   0}; // PCO param Inutile ?
	t_param Use_dynamic_comp = 		{1608, 2, 13, 1,   0}; // PCO param Inutile ?
	t_param Floating_voltage = 		{1140, 2, 13, 6,  61.5};//step 0.1 , PCO en mode inspect il faudrait lire avant 7061
	t_param Force_floating = 		{1467, 2, 13, 5,   0}; // PCO param inutile
	t_param Voltage_1_start_new_cycle = 	{1143, 2, 13, 6,  45.0};//step 0.10 PCO parm inutile
	t_param Voltage_2_start_new_cycle = 	{1145, 2, 13, 6,  44.0};//step 0.10 PCO parm inutile
	t_param Time_1_under_voltage = 		{1144, 2, 13, 6, 180};//step 1 PCO Parm inutile
	t_param Time_2_under_voltage = 		{1146, 2, 13, 6, 180};//step 10 PCO Parm inutile
	t_param Absorption_phase_allowed = 	{1155, 2, 13, 1,   0}; // PCO OK
	t_param Absorption_voltage = 		{1156, 2, 13, 6,  63.0};//step 0.1 //PCO en mode inspect il faudrait lire avant 7061
	t_param Absorption_duration = 		{1157, 2, 13, 6,   0};//step 0.25h PCO : V. Penas suggere zero
	t_param End_absorption_current = 	{1158, 2, 13, 1,   1}; // PCO parm inutile
	t_param Current_to_quit_absorption = 	{1159, 2, 13, 6,   2};//step 1A // PCO parm inutile
	t_param Maximal_freq_absorption = 	{1160, 2, 13, 1,   1};//PCO parm inutile
	t_param Delay_beetween_absorption =	{1161, 2, 13, 6,   1};//step 1h , PCO parm inutile
	t_param Equalization_phase_allowed = 	{1163, 2, 13, 1,   0}; // PCO Parm inutile
	t_param Reduced_floating_allowed = 	{1170, 2, 13, 1,   0}; // PCO Parm inutile
	t_param Periodic_absorption_allowed = 	{1173, 2, 13, 1,   0}; // PCO Parm inutile
	t_param Over_Voltage_Value_allowed = 	{1121, 2, 13, 6,  63.0}; // PCO OK
	t_param Voltage_After_Over_allowed =    {1122, 2, 13, 6,  61.5}; // PCO OK
	t_param Under_Voltage_Value_allowed =	{1108, 2, 13, 6, 43.0}; // PCO suggere 15 x 2.9V limite de declenchement au lieu de 41V
	t_param Voltage_After_Under_allowed = 	{1110, 2, 13, 6, 45.0}; // PCO Pram inutile
	t_param Bat_Temp_Com_Coef = {1139,2,13,6,0}; // PCO OK
	/*-----------------------------------------------------------------------*/
	//Format : BOOL(1) FORMAT(2) ENUM(3) ERROR(4) INT32(5) FLOAT(6) STRING(7) DYNAMIC(8) BYTE_STREAM(9) LONG_ENUM(10) SHORT_ENUM(11
	/* ----------------------------Inverter -----------------------------*/
	t_param Inverter_Allowed = 	  	  {1124, 2, 13, 1,   1};//step 1 PCO OK
	t_param Inverter_Output_Voltage = {1286, 2, 13, 6, 230.0};//step 1 PCO : parma inutile ?
	t_param Inverter_Frequency = 	    {1112, 2, 13, 6,  50.0};//step 0.1 PCO : parma inutile ?
	t_param Batt_priority_source =    {1296, 2, 13, 1, 0}; //PCO : parma inutile ?
	/*------------------------------------------------------------------*/
	/*------------------------ Standby and turn on ------------------*/
	t_param Standby_level = 	    {1187, 2, 13, 6, 20};//step 10% , à tester PCO : parma inutile ?
	t_param Standby_nbr_pulse =  {1188, 2, 13, 6,  1};//step 1 //PCO : parma inutile ?
	/*--------------------------------------------------------------*/
	/*-------------------- AC-IN and transfert ---------------------*/
	t_param Transfer_relay_allowed = {1128, 2, 13, 1, 1}; // PCO param inutile ?
	t_param Smart_boost_allowed = 	 {1126, 2, 13, 1, 1}; // PCO OK voir alogo ensuite
	t_param MAX_current_of_AC_IN =   {1107, 2, 13, 6, 35};//step 1 PCO : OK
	/*-------------------------------------------------------------*/
	//-------------- Multi Xtender System ----------------------
	t_param Multi_inverters_allowed = {1461, 2, 13, 1, 0}; // PCO param inutile
	t_param Integral_mode = 	  	    {1283, 2, 13, 1, 0}; // PCO param inutile
	/*---------------------------------------------------------*/
	//-------------- Multi Xtender System ----------------------
	t_param Soc_Backup = {6062, 2, 13, 6, 80}; // PCO OK
	t_param Soc_Inject = {6063, 2, 13, 6, 80}; // PCO OK corriger 6063 !
	/*---------------------------------------------------------*/
	/*----------------- Grid Feeding --------------------------*/
	t_param Grid_Feeding_allowed = 			     {1127, 2, 13, 1,    1}; // PCO OK selon algo
	t_param Max_Grid_Feeding_current = 		   {1523, 2, 13, 6,   30.0};//step 0.2 // PCO Rajouter test et diminuer 30 à 2?
	t_param Battery_voltage_forced_feeding = {1524, 2, 13, 6,    40.0};//step 0.1 à tester //PCO  Parm inutile ?
	t_param Start_Time_forced_injection =	   {1525, 2, 13, 5,   10};//step : 1, regarder avec Flo le format PCO pourquoi ?
	t_param Stop_Time_forced_injection =	   {1526, 2, 13, 5,   10};//step : 1, regarder avec Flo le format PCO pourquoi ?
	t_param Use_defined_phase_shift_curve  = {1610, 2, 13, 1,    1}; // PCO Parm inutile
	t_param Cos_phi_P_0 = 					         {1622, 2, 13, 6,    0};//step 0.01, à voir PCO parm inutile
	t_param Cos_phi_P_100 = 				         {1624, 2, 13, 6,  0.1};//step 0.01, à voir PCO parm inutile
	t_param Cos_phi_at_P_1613 = 			       {1623, 2, 13, 6, 0.05};//step 0.01 à voir PACO parm inutile
	t_param Power_of_second_cos_phi_point =  {1613, 2, 13, 6,   50};//step 5% of Pnom, à voir parm inutile
	t_param Fast_charge_inject_regulation =  {1615, 2, 13, 1, 	 1};
	t_param Pulses_cutting_regulation_for_XT = {1645, 2, 13, 1, 1};

	/*------------------------------------------------------------------------------*/

	/*--------------------------- Xtender_Infos --------------------------------------*/
	t_param i_Battery_Voltage_Studer = 				 {3000, 1, 1,  6, Not_Value};
	t_param i_Wanted_battery_charge_current =  {3004, 1, 1,  6, Not_Value};
	t_param i_Battery_Charge_current = 			   {3005, 1, 1,  6, Not_Value};
	t_param i_State_of_charge = 				       {3007, 1, 1,  6, Not_Value};
	t_param i_Battery_cycle_phase = 			     {3010, 1, 1, 11, Not_Value}; // 0 = invalid , 1 = Bulk , 2 = absorption , 3 = equalize , 4 = floating , 5 = Reduce floating , 6 = Periodic absorption , 7 = mixing , 8 = forming
	t_param i_Input_voltage_AC_IN = 			     {3011, 1, 1,  6, Not_Value};
	t_param i_Input_current_AC_IN = 			     {3012, 1, 1,  6, Not_Value};
	t_param i_Input_power_AC_IN = 				     {3013, 1, 1,  6, Not_Value};
	t_param i_Input_current_limit = 			     {3017, 1, 1,  6, Not_Value};
	t_param i_Input_current_limit_reached = 	 {3018, 1, 1, 11, Not_Value}; // 0 = Off , 1 = on
	t_param i_Boost_active = 					         {3019, 1, 1, 11, Not_Value};// 0 = Off , 1 = on
	t_param i_Output_voltage_AC_OUT = 			   {3021, 1, 1,  6, Not_Value};
	t_param i_Output_current_AC_OUT = 			   {3022, 1, 1,  6, Not_Value};
	t_param i_Output_power_AC_OUT = 			     {3023, 1, 1,  6, Not_Value};
	t_param i_Operating_state = 				       {3028, 1, 1, 11, Not_Value}; // 0 = invalid, 1 = inverte, 2 = charger, 3 = Boost,  4 = Injection
	t_param i_State_of_inverter = 				     {3049, 1, 1, 11, Not_Value}; // 0 = Off , 1 = on
	t_param i_Discharge_Battery_Power_Day_ahead = {3076, 1, 1,  6, Not_Value};
	t_param i_Dishcarge_Battery_Power_today =  {3078, 1, 1,  6, Not_Value};

	t_param i_Energy_AC_IN_Day_ahead = 			   {3080, 1, 1,  6, Not_Value};
	t_param i_Energy_AC_IN_today = 				     {3081, 1, 1,  6, Not_Value};
	t_param i_Energy_AC_OUT_Day_ahead = 		   {3082, 1, 1,  6, Not_Value};
	t_param i_Energy_AC_OUT_today = 			     {3083, 1, 1,  6, Not_Value};
	t_param i_AC_IN_frequency = 				       {3084, 1, 1,  6, Not_Value};
	t_param i_AC_OUT_frequency = 				       {3085, 1, 1,  6, Not_Value};
	t_param i_Injection_current_AC_desired = 	 {3155, 1, 1,  6, Not_Value};
	t_param i_Battery_priority_active = 		   {3161, 1, 1, 11, Not_Value};// 0 = Off , 1 = on
	t_param i_Forced_grid_feeding_active = 		 {3162, 1, 1, 11, Not_Value};// 0 = Off , 1 = on

	/*--------------------------- Batterry info --------------------------------------*/


// PCO
// psmax = courant_decharge_limite IAdc (param 7064) x tension_dc (param 7000)
// a voir s'il faut pas remplacer par des valeur moyenne de 1 min, autre param disponibles

	t_param i_Battery_Voltage = 	{7000, 1, 1, 6, 0};
	t_param i_Battery_Current = 	{7001, 1, 1, 6, 0};
	t_param i_soc_value_battery = {7047, 1, 1, 6, 0};
	t_param i_State_of_Health = 	{7057, 1, 1, 6, 0};

	t_param i_Battery_Voltage_Charge_limit = 	 				{7061, 1, 1, 6, 0};
	t_param i_Battery_Voltage_Discharge_limit =	 			{7062, 1, 1, 6, 0};
	t_param i_Battery_Current_Charge_limit = 	 				{7063, 1, 1, 6, 0};
	t_param i_Battery_Current_Discharge_limit =				{7064, 1, 1, 6, 0};
	t_param i_Battery_Current_Charge_recommanded = 		{7065, 1, 1, 6, 0};
	t_param i_Battery_Current_Discharge_recommanded = {7066, 1, 1, 6, 0};

// PCO : En mode inspect control, soit Xtender master
  // On peut lire la tension de charge à appliquer sur {1140} et {1156} (={7061}) (floating et absorption voltages)
  // de même courant de charge  -	décharge :
  //{1523}[Aac] < {7064}[Adc]*{7000}[Udc]/230[Vac]
  //charge {1138} [Adc] < {7065} [Adc] )


/*----------------------------------------------------------------------------------*/
	//Format : BOOL(1) FORMAT(2) ENUM(3) ERROR(4) INT32(5) FLOAT(6) STRING(7) DYNAMIC(8) BYTE_STREAM(9) LONG_ENUM(10) SHORT_ENUM(11)
  t_param Parameters_saved_in_flash_memory = {1550, 2, 5, 1, 1};
